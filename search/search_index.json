{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p><code>ZOO Calrissian Runner</code> provides a bridge between the ZOO Project and Calrissian using pycalrissian.</p> <p>The goal is to ease the development of runners that implement a business logic for the EOEPCA ADES Zoo implementation.</p> <p>A runner provides an execution engine for Zoo. This repository and documentation provides a runner for Kubernetes using Calrissian.</p> <p>Below an overview of the building block</p> <p></p>"},{"location":"#service-deployment","title":"Service deployment","text":"<p>When a service is deployed, the ADES instantiates a cookiecutter processing service template.</p> <p>The scaffolded service folder contains a <code>service.py</code> Python file that executes the Application Package.</p> <p>The <code>service.py</code> must implement a function with the signature:</p> <pre><code>def {{cookiecutter.workflow_id | replace(\"-\", \"_\")  }}(conf, inputs, outputs):\n</code></pre> <p>And return <code>zoo.SERVICE_SUCCEEDED</code> if the execution is a success or <code>zoo.SERVICE_FAILED</code> if failed.</p> <p>It must also implement an <code>ExecutionHandler</code>.</p> <p>The <code>ExecutionHandler</code> is a abstract class defined as follows:</p> <pre><code>from abc import ABC, abstractmethod\n\n\nclass ExecutionHandler(ABC):\n    def __init__(self, **kwargs):\n        self.__dict__.update(kwargs)\n        self.job_id = None\n\n    def set_job_id(self, job_id):\n        self.job_id = job_id\n\n    @abstractmethod\n    def pre_execution_hook(self):\n        pass\n\n    @abstractmethod\n    def post_execution_hook(self):\n        pass\n\n    @abstractmethod\n    def get_secrets(self):\n        pass\n\n    @abstractmethod\n    def get_pod_env_vars(self):\n        pass\n\n    @abstractmethod\n    def get_pod_node_selector(self):\n        pass\n\n    @abstractmethod\n    def handle_outputs(self, execution_log, output, usage_report, tool_logs=None):\n        pass\n\n    @abstractmethod\n    def get_additional_parameters(self):\n        pass\n</code></pre>"},{"location":"#service-execution","title":"Service execution","text":"<p>The service execution follows the <code>ZooCalrissianRunner</code> execution defined in its <code>execute</code> method.</p>"},{"location":"#what-eoepca-provides","title":"What EOEPCA provides","text":"<p>EOEPCA provides:</p> <ul> <li>a example of a Zoo service template in the https://github.com/EOEPCA/proc-service-template software repository</li> <li>an implementation including the interaction with the Workspace API and the Catalog in the https://github.com/EOEPCA/eoepca-proc-service-template software repository</li> </ul> <p>Other service template can of course be implemented with different business logics and interfacing with other systems or APIs.</p>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#environment-variables","title":"Environment variables","text":""},{"location":"configuration/#k8s","title":"K8S","text":"<ul> <li><code>STORAGE_CLASS</code>: defines the k8s RWX storage class for Calrissian. Defaults to <code>longhorn</code></li> <li><code>KEEP_SESSION</code>: if set to <code>true</code>, the session and thus the kubernetes namespace is not deleted</li> </ul>"},{"location":"configuration/#calrissian-resources","title":"Calrissian resources","text":"<ul> <li><code>SCATTER_MULTIPLIER</code>: scatter factor multiplier. Defaults to <code>2</code>.</li> </ul>"},{"location":"configuration/#cwl-wrapper","title":"CWL Wrapper","text":"<p>The cwl-wrapper templates can be customized with the environment variables:</p> <ul> <li><code>WRAPPER_STAGE_IN</code>: CWL stage-in template for cwl-wrapper. Defaults to <code>/assets/stagein.yaml</code></li> <li><code>WRAPPER_STAGE_OUT</code>: CWL stage-out template for cwl-wrapper. Defaults to <code>/assets/stageout.yaml</code></li> <li><code>WRAPPER_MAIN</code>: cwl-wrapper main template. Defaults to <code>/assets/maincwl.yaml</code></li> <li><code>WRAPPER_RULES</code>: cwl-wrapper rules template Defaults to <code>/assets/rules.yaml</code></li> </ul>"},{"location":"configuration/#calrissian","title":"Calrissian","text":"<p>Calrissian and its runtime context can be customized with:</p> <ul> <li><code>CALRISSIAN_IMAGE</code>: Calrissian container image</li> <li><code>DEFAULT_VOLUME_SIZE</code>: default volume size for the RWX volume used by Calrissian. Expressed in mebibytes (2**20). Defaults to <code>10000</code></li> <li><code>DEFAULT_MAX_CORES</code>: maximum number of cores used by Calrissian pods. Defaults to <code>2</code></li> <li><code>DEFAULT_MAX_RAM</code>: maximum RAM used by Calrissian pods.</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>The package is installed with:</p> <pre><code>mamba install -c terradue -c conda-forge zoo-calrissian-runner\n</code></pre> <p>Test the installation with:</p> <pre><code>from zoo_calrissian_runner import ExecutionHandler, ZooCalrissianRunner\n</code></pre>"},{"location":"started/","title":"Getting started","text":"<p>Check the complete example provided under the folder tests/dnbr</p>"},{"location":"api/zoo_calrissian_runner/","title":"Module zoo_calrissian_runner","text":""},{"location":"api/zoo_calrissian_runner/#sub-modules","title":"Sub-modules","text":"<ul> <li>zoo_calrissian_runner.handlers</li> </ul>"},{"location":"api/zoo_calrissian_runner/#variables","title":"Variables","text":"<pre><code>zoo\n</code></pre>"},{"location":"api/zoo_calrissian_runner/#classes","title":"Classes","text":""},{"location":"api/zoo_calrissian_runner/#resourcerequirement","title":"ResourceRequirement","text":"<pre><code>class ResourceRequirement(\n    coresMin=None,\n    coresMax=None,\n    ramMin=None,\n    ramMax=None,\n    tmpdirMin=None,\n    tmpdirMax=None,\n    outdirMin=None,\n    outdirMax=None\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/#class-variables","title":"Class variables","text":"<pre><code>coresMax\n</code></pre> <pre><code>coresMin\n</code></pre> <pre><code>outdirMax\n</code></pre> <pre><code>outdirMin\n</code></pre> <pre><code>ramMax\n</code></pre> <pre><code>ramMin\n</code></pre> <pre><code>tmpdirMax\n</code></pre> <pre><code>tmpdirMin\n</code></pre>"},{"location":"api/zoo_calrissian_runner/#static-methods","title":"Static methods","text":""},{"location":"api/zoo_calrissian_runner/#from_dict","title":"from_dict","text":"<pre><code>def from_dict(\n    env\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/#workflow","title":"Workflow","text":"<pre><code>class Workflow(\n    cwl,\n    workflow_id\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/#static-methods_1","title":"Static methods","text":""},{"location":"api/zoo_calrissian_runner/#get_resource_requirement","title":"get_resource_requirement","text":"<pre><code>def get_resource_requirement(\n    elem\n)\n</code></pre> <p>Gets the ResourceRequirement out of a CommandLineTool or Workflow</p> <p>Parameters:</p> Name Type Description Default elem CommandLineTool or Workflow CommandLineTool or Workflow None <p>Returns:</p> Type Description None cwl_utils.parser.cwl_v1_2.ResourceRequirement or ResourceRequirement"},{"location":"api/zoo_calrissian_runner/#has_scatter_requirement","title":"has_scatter_requirement","text":"<pre><code>def has_scatter_requirement(\n    workflow\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/#methods","title":"Methods","text":""},{"location":"api/zoo_calrissian_runner/#eval_resource","title":"eval_resource","text":"<pre><code>def eval_resource(\n    self\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/#get_object_by_id","title":"get_object_by_id","text":"<pre><code>def get_object_by_id(\n    self,\n    id\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/#get_workflow","title":"get_workflow","text":"<pre><code>def get_workflow(\n    self\n) -&gt; cwl_utils.parser.cwl_v1_0.Workflow\n</code></pre>"},{"location":"api/zoo_calrissian_runner/#get_workflow_inputs","title":"get_workflow_inputs","text":"<pre><code>def get_workflow_inputs(\n    self,\n    mandatory=False\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/#zoocalrissianrunner","title":"ZooCalrissianRunner","text":"<pre><code>class ZooCalrissianRunner(\n    cwl,\n    conf,\n    inputs,\n    outputs,\n    execution_handler: Optional[zoo_calrissian_runner.handlers.ExecutionHandler] = None\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/#static-methods_2","title":"Static methods","text":""},{"location":"api/zoo_calrissian_runner/#shorten_namespace","title":"shorten_namespace","text":"<pre><code>def shorten_namespace(\n    value: str\n) -&gt; str\n</code></pre> <p>shortens the namespace to 63 characters</p>"},{"location":"api/zoo_calrissian_runner/#methods_1","title":"Methods","text":""},{"location":"api/zoo_calrissian_runner/#assert_parameters","title":"assert_parameters","text":"<pre><code>def assert_parameters(\n    self\n)\n</code></pre> <p>checks all mandatory processing parameters were provided</p>"},{"location":"api/zoo_calrissian_runner/#execute","title":"execute","text":"<pre><code>def execute(\n    self\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/#get_max_cores","title":"get_max_cores","text":"<pre><code>def get_max_cores(\n    self\n) -&gt; int\n</code></pre> <p>returns the maximum number of cores that pods can use</p>"},{"location":"api/zoo_calrissian_runner/#get_max_ram","title":"get_max_ram","text":"<pre><code>def get_max_ram(\n    self\n) -&gt; str\n</code></pre> <p>returns the maximum RAM that pods can use</p>"},{"location":"api/zoo_calrissian_runner/#get_namespace_name","title":"get_namespace_name","text":"<pre><code>def get_namespace_name(\n    self\n)\n</code></pre> <p>creates or returns the namespace</p>"},{"location":"api/zoo_calrissian_runner/#get_processing_parameters","title":"get_processing_parameters","text":"<pre><code>def get_processing_parameters(\n    self\n)\n</code></pre> <p>Gets the processing parameters from the zoo inputs</p>"},{"location":"api/zoo_calrissian_runner/#get_volume_size","title":"get_volume_size","text":"<pre><code>def get_volume_size(\n    self\n) -&gt; str\n</code></pre> <p>returns volume size that the pods share</p>"},{"location":"api/zoo_calrissian_runner/#get_workflow_id","title":"get_workflow_id","text":"<pre><code>def get_workflow_id(\n    self\n)\n</code></pre> <p>returns the workflow id (CWL entry point)</p>"},{"location":"api/zoo_calrissian_runner/#get_workflow_inputs_1","title":"get_workflow_inputs","text":"<pre><code>def get_workflow_inputs(\n    self,\n    mandatory=False\n)\n</code></pre> <p>Returns the CWL workflow inputs</p>"},{"location":"api/zoo_calrissian_runner/#update_status","title":"update_status","text":"<pre><code>def update_status(\n    self,\n    progress: int,\n    message: str = None\n) -&gt; None\n</code></pre> <p>updates the execution progress (%) and provides an optional message</p>"},{"location":"api/zoo_calrissian_runner/#wrap","title":"wrap","text":"<pre><code>def wrap(\n    self\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/#zooconf","title":"ZooConf","text":"<pre><code>class ZooConf(\n    conf\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/#zooinputs","title":"ZooInputs","text":"<pre><code>class ZooInputs(\n    inputs\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/#methods_2","title":"Methods","text":""},{"location":"api/zoo_calrissian_runner/#get_input_value","title":"get_input_value","text":"<pre><code>def get_input_value(\n    self,\n    key\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/#get_processing_parameters_1","title":"get_processing_parameters","text":"<pre><code>def get_processing_parameters(\n    self\n)\n</code></pre> <p>Returns a list with the input parameters keys</p>"},{"location":"api/zoo_calrissian_runner/#zoooutputs","title":"ZooOutputs","text":"<pre><code>class ZooOutputs(\n    outputs\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/#methods_3","title":"Methods","text":""},{"location":"api/zoo_calrissian_runner/#get_output_parameters","title":"get_output_parameters","text":"<pre><code>def get_output_parameters(\n    self\n)\n</code></pre> <p>Returns a list with the output parameters keys</p>"},{"location":"api/zoo_calrissian_runner/#set_output","title":"set_output","text":"<pre><code>def set_output(\n    self,\n    value\n)\n</code></pre> <p>set the output result value</p>"},{"location":"api/zoo_calrissian_runner/#zoostub","title":"ZooStub","text":"<pre><code>class ZooStub(\n\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/#methods_4","title":"Methods","text":""},{"location":"api/zoo_calrissian_runner/#update_status_1","title":"update_status","text":"<pre><code>def update_status(\n    self,\n    conf,\n    progress\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/handlers/","title":"Module zoo_calrissian_runner.handlers","text":""},{"location":"api/zoo_calrissian_runner/handlers/#classes","title":"Classes","text":""},{"location":"api/zoo_calrissian_runner/handlers/#executionhandler","title":"ExecutionHandler","text":"<pre><code>class ExecutionHandler(\n    **kwargs\n)\n</code></pre> <p>Helper class that provides a standard way to create an ABC using</p> <p>inheritance.</p>"},{"location":"api/zoo_calrissian_runner/handlers/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>abc.ABC</li> </ul>"},{"location":"api/zoo_calrissian_runner/handlers/#methods","title":"Methods","text":""},{"location":"api/zoo_calrissian_runner/handlers/#get_additional_parameters","title":"get_additional_parameters","text":"<pre><code>def get_additional_parameters(\n    self\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/handlers/#get_pod_env_vars","title":"get_pod_env_vars","text":"<pre><code>def get_pod_env_vars(\n    self\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/handlers/#get_pod_node_selector","title":"get_pod_node_selector","text":"<pre><code>def get_pod_node_selector(\n    self\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/handlers/#get_secrets","title":"get_secrets","text":"<pre><code>def get_secrets(\n    self\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/handlers/#handle_outputs","title":"handle_outputs","text":"<pre><code>def handle_outputs(\n    self,\n    execution_log,\n    output,\n    usage_report,\n    tool_logs=None\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/handlers/#post_execution_hook","title":"post_execution_hook","text":"<pre><code>def post_execution_hook(\n    self\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/handlers/#pre_execution_hook","title":"pre_execution_hook","text":"<pre><code>def pre_execution_hook(\n    self\n)\n</code></pre>"},{"location":"api/zoo_calrissian_runner/handlers/#set_job_id","title":"set_job_id","text":"<pre><code>def set_job_id(\n    self,\n    job_id\n)\n</code></pre>"}]}